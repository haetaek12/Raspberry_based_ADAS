#include <stdio.h>
#include <opencv2/opencv.hpp>
#include <iostream>

using namespace std;
using namespace cv;

#define IMG_Width 640
#define IMG_Height 480
#define PERSPECTIVE_IMG_W 640
#define PERSPECTIVE_IMG_H 480

Point2f Source[] = {Point2f(0,0), Point2f(-300,340), Point2f(640,0), Point2f(640+300,330)};
Point2f Destination[] = {Point2f(0,0), Point2f(0,PERSPECTIVE_IMG_H), Point2f(PERSPECTIVE_IMG_W,0), Point(PERSPECTIVE_IMG_W,PERSPECTIVE_IMG_H)};
MAT Perspective(Mat img)
{
	Mat Matrix, result_img;
	Matrix = getPerspectiveTransform(source,Destination);
	warpPerspective(img, result_img,Matrix,Size(PERSPECTIVE_IMG_W,PERSPECTIVE_IMG_H));
	return result_img;
}

Mat Canny_Edge_Detection(Mat img)
{
	Mat mat_blur_img, mat_canny_img;
	blur(img, mat_blur_img, Size(3,3));
	Canny(mat_blur_img,mat_canny_img,70,170,5);
	return mat_canny_img;
}


int main(void)
{
	int img_width, img_height;
	img_width = 640;
	img_height = 480;

	Mat mat_image_org_color;
	Mat mat_image_org_gray;
	Mat mat_image_gray_result;
	Mat mat_image_canny_edge;
	Mat image;

	Scalar GREEN(0,255,0);
	Scalar RED(0,0,255);
	Scalar BLUE(255,0,0);
	Scalar YELLOW(0,255,255);

	//VideoCapture cap(0); //usb연결되어있는 카메라
	mat_image_org_color = imread("/~~/line.jpg");

	img_width = mat_image_org.size().width;
	img_height = mat_image_org.size().height;

	namedWindow("Display window", CV_WINDOW_NORMAL);
	resizeWindow("Display window", img_width, img_height);
	moveWindow("Display window", 10,10);

	namedWindow("Gray Image window", CV_WINDOW_NORMAL);
	resizeWindow("Gray Image window", img_width, img_height);
	moveWindow("Gray Image window", 700,10);

	namedWindow("Binary Image window", CV_WINDOW_NORMAL);
	resizeWindow("Binary Image window", img_width, img_height);
	moveWindow("Binary Image window", 10,500);

	while(1)
	{
		mat_image_org_color = imread("");
		
		vector<Vec4i> linesP;	//4개의 점을 int로
		HoughLinesP(mat_image_canny_edge, linesP, 1, CV_PI/180,30,30,10);	

		image = Perspective(mat_image_org_color);
		for(int i=0;i<linesP.size();i++)
		{
			Vec4i L = linesP[i];
			int cx1 = linesP[i][0];
			int cy1 = linesP[i][1];
			int cx2 = linesP[i][2];
			int cy2 = linesP[i][3];
			line(mat_image_org_color, Point(L[0],L[1]),Point(L[2],L[3]), Scalar(0,0,255), 3, 		LINE_AA);
			printf("L : [%3d,%3d], [%3d,%3d] \n",L[0],L[1],L[2],L[3]);
			printf("H : [%3d,%3d], [%3d,%3d] \n",cx1,cy1,cx2,cy2);
			printf("'n'n'n");
		}

		if(mat_image_org_color.empty())
		{
			cerr<<"빈 영상입니다.\n";
			return -1;
		}
		imshow("Display window", mat_image_org_color);
		imshow("Gray Image window", mat_image_org_gray);
		imshow("Binary window", mat_image_binary);
		if(waitKey(10)>0)
		{
			break;
		}
	}
	destoryAllWindows();
	return 0;
}